name: Deploy frontend to S3 + CloudFront

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-north-1
  S3_BUCKET: calling-system-frontend
  CF_DISTRIBUTION_ID: EQGVKF62DQIBN

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-frontend
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install deps
        run: npm ci

      # 1) Load bundled secret MY_ENV_SECRET (KEY=VALUE lines) into the job environment
      - name: Load bundled env
        shell: bash
        env:
          BUNDLE: ${{ secrets.MY_ENV_SECRET }}
        run: |
          set -euo pipefail
          if [ -z "${BUNDLE:-}" ]; then
            echo "::error title=Missing secret::MY_ENV_SECRETE is not set"
            exit 1
          fi
          printf '%s\n' "$BUNDLE" | awk '
            /^[[:space:]]*$/ { next }      # skip empty
            /^[[:space:]]*#/ { next }       # skip comments
            { print $0 }
          ' >> "$GITHUB_ENV"

      # Fail fast if any required keys are missing after loading the bundle
      - name: Verify required envs
        shell: bash
        run: |
          set -euo pipefail
          required=( \
            VITE_FIREBASE_API_KEY \
            VITE_FIREBASE_AUTH_DOMAIN \
            VITE_FIREBASE_PROJECT_ID \
            VITE_FIREBASE_APP_ID \
            VITE_API_BASE \
          )
          missing=0
          for k in "${required[@]}"; do
            if [ -z "${!k:-}" ]; then
              echo "::error title=Missing env in MY_ENV_SECRETE::$k is not set"
              missing=1
            fi
          done
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi
          echo "All required envs present."

      - name: Build (Vite)
        run: npm run build
        # inherits env from $GITHUB_ENV

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::688567267190:role/github-calling-system-role
          aws-region: ${{ env.AWS_REGION }}

      # Fingerprinted assets → long cache
      - name: Upload assets
        run: |
          aws s3 sync dist s3://$S3_BUCKET \
            --delete \
            --exclude "index.html" \
            --cache-control "public,max-age=31536000,immutable"

      # HTML → no-cache
      - name: Upload index.html
        run: |
          aws s3 cp dist/index.html s3://$S3_BUCKET/index.html \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE \
            --content-type "text/html; charset=utf-8"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CF_DISTRIBUTION_ID \
            --paths "/index.html" "/assets/*"
